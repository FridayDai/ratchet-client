var flight = require('flight');
var WithCombobox = require('./WithCombobox');

function WithComplexCombobox() {

    flight.compose.mixin(this, [
        WithCombobox
    ]);

    $.widget( "ui.autocomplete", $.ui.autocomplete, {

        // The _renderItem() method is responsible for rendering each
        // menu item in the autocomplete menu.
        _renderItem: function( ul, item ) {

            // We want the rendered menu item generated by the default implementation.
            var result = this._super( ul, item );

            // If there is logo data, add our custom CSS class, and the specific
            if ( item.iconClass ) {
                result.prepend($("<span />").addClass(item.iconClass));
            }

            return result;
        }

    });

    $.widget("ui.combobox", {
        _create: function () {
            var wrapper = this.wrapper = $("<span />").addClass("ui-combobox"),
                self = this,
                classes = [
                    "input-group",
                    "ui-state-default",
                    "ui-combobox-input",
                    "ui-widget",
                    "ui-widget-content",
                    "ui-corner-left"
                ].join(' ');


            this.element.wrap(wrapper);

            $(this.element).data('saved', {
                label: '',
                value: ''
            });

            this.element
                .addClass(classes)
                .autocomplete($.extend({
                    minLength: 0,
                    focusSearch: true,
                    select: function (event, ui) {
                        event.preventDefault();

                        $(this)
                            .val(ui.item.label)
                            .data("id", ui.item.value)
                            .data("saved", ui.item);

                        var inputIcon = $(this).prev('span');

                        if(inputIcon.length) {
                            inputIcon
                                .removeClass()
                                .addClass('ui-combobox-input-icon')
                                .addClass(ui.item.iconClass).show();
                        } else {
                            $(this).parent().prepend($("<span />")
                                .addClass('ui-combobox-input-icon')
                                .addClass(ui.item.iconClass));
                        }

                        if(ui.item.iconClass) {
                            $(this).addClass('complex-combobox');
                        } else {
                            $(this).removeClass('complex-combobox');
                        }
                    },
                    change: function (event, ui) {
                        event.preventDefault();

                        var saved = $(this).data('saved');

                        if (ui.item === null && saved && $(this).val() !== '') {
                            $(this)
                                .val(saved.label)
                                .data('id', saved.value);
                        }
                    },
                    focus: function (event, ui) {
                        event.preventDefault();
                        $(this)
                            .val(ui.item.label)
                            .data("id", ui.item.value);
                    }
                }, this.options));

            $("<a />")
                .insertAfter(this.element)
                .button({
                    icons: {
                        primary: "ui-icon-triangle-1-s"
                    },
                    text: false
                })
                .addClass("ui-combobox-toggle")
                .click(function () {
                    if (self.element.is(":disabled")) {
                        return;
                    }

                    var $menu = self.element.autocomplete("widget");

                    if ($menu.is(":visible")) {
                        self.element.autocomplete("close");
                        return;
                    }

                    if ($menu.children().length > 0) {
                        self.element.trigger('click');
                    } else {
                        self.element.autocomplete("search", '');
                    }

                    self.element.focus();
                });

            if (self.element.is(":disabled")) {
                self.element.parent().find("a").addClass('disable');
            }
        },

        destroy: function () {
            this.wrapper.remove();
            this.element.parent().find("a").remove();
            this.element.parent().find("span").remove();
            this.element.show();
            $.Widget.prototype.destroy.call(this);
        }
    });

    this.onChange = function () {
        var inputIcon = this.$node.parent().find('.ui-combobox-input-icon');

        if(inputIcon.length) {
            inputIcon.removeClass('ui-combobox-input-icon').hide();
        }
    };

    var DEFAULT_CLEAR_EVENT = 'clear';

    this.clearInput = function () {
        $(this.$node)
            .val('')
            .data('saved', null)
            .data("id", '');
        this.__previousVal = null;
        this.$node.autocomplete( "widget").empty();
    };

    this.__onClear = function () {
        this.clearInput();

        if (this.attr.clearEvent !== DEFAULT_CLEAR_EVENT) {
            var data = {};
            data[this.attr.selectDataKey] = null;

            this.trigger(this.attr.clearEvent, data);
        }
    };

    this.after('initialize', function () {
        this.on('change input', this.onChange);
        this.on('autocompleteclear', this.__onClear);
    });
}

module.exports = WithComplexCombobox;
